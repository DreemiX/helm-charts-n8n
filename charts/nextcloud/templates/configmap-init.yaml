---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-init
  {{- if .Values.nextcloud.commonAnnotations }}
  annotations: {{- dict "value" .Values.nextcloud.commonAnnotations "context" $ | nindent 4 }}
  {{- end }}
data:
  nextcloud-init.sh: |
    set -x
    set +e

    run() {
      su www-data -p -m -s /bin/sh -c "php /app/nextcloud/occ $*"
    }

    ncset() {
      run config:system:set $*
    }

    nc_download() {
      echo "Downloading and extracting nextcloud ({{ .Chart.AppVersion }}) . . ."
      wget -O - https://download.nextcloud.com/server/releases/nextcloud-{{ .Chart.AppVersion }}.tar.bz2 | tar xjf - -C /app

      {{- if (default .Values.nextcloud.deleteSkeletonFolder true) }}
      echo "Deleting skeleton folder . . ."
      rm -rf /app/nextcloud/core/skeleton
      {{- end }}

      echo "Creating data folder and setting permissions . . ."
      [ ! -d /app/nextcloud/data ] && mkdir /app/nextcloud/data && chown www-data:www-data /app/nextcloud/data
      [ ! -d /app/tmp ] && mkdir /app/tmp

      find /app -path /app/nextcloud/data -prune -o -exec chown www-data:www-data {} +
    }

    echo "Checking if index.php already present . . ."
    if [ ! -f "/app/nextcloud/index.php" ]; then
      echo "index.php not found . . ."
      nc_download
    else
      NC_INSTALLED_VERSION=$(run status | grep 'version:' | egrep -o '([0-9]{1,}\.?){2}([0-9]{1,})' || true)

      if [ -z "${NC_INSTALLED_VERSION}" ]; then
        echo "ERROR! Can't get currently installed version!"
        exit 1
      fi

      echo "Installed Version: ${NC_INSTALLED_VERSION}"
      echo "Target Version: {{ .Chart.AppVersion }}"

      NC_INSTALLED_VERSION_MAJOR=$(echo -n ${NC_INSTALLED_VERSION} | cut -d'.' -f1)
      NC_TARGET_VERSION_MAJOR=$(echo -n {{ .Chart.AppVersion }} | cut -d'.' -f1)

      if [ $(expr ${NC_TARGET_VERSION_MAJOR} - ${NC_INSTALLED_VERSION_MAJOR}) -gt 1 ]; then
        echo "ERROR! Nextcloud does not support updates between multiple major versions!"
        echo "Please adjust .Chart.AppVersion and perform the upgrade process in multiple steps!"
        exit 1
      fi

      if [ "{{ .Chart.AppVersion }}" != "${NC_INSTALLED_VERSION}" ]; then 
        echo "Target Version is different from installed Version! Download new version . . ."
        nc_download

        echo "Running occ upgrade command . . ."
        run upgrade
      else
        echo "Nextcloud is installed and present, nothing to do . . ."
      fi
    fi

    echo "Checking installation status . . ."
    if ! run status | grep -q 'installed: true'; then
      echo "Installing nextcloud . . ."
      run maintenance:install --admin-user="${NC_ADMIN_USERNAME}" \
                              --admin-pass="${NC_ADMIN_PASSWORD}" \
                              --data-dir="/app/nextcloud/data" \
                              {{- if eq .Values.nextcloud.databaseType "pgsql" }}
                              --database="pgsql" \
                              --database-host="{{ .Release.Name }}-postgres" \
                              --database-name="${POSTGRES_DB}" \
                              --database-user="${POSTGRES_USER}" \
                              --database-pass="${POSTGRES_PASSWORD}"
                              {{- end }}

      echo "Setting set +e since user input can interrupt the script . . ."
      set +e
      {{ if gt (len .Values.nextcloud.apps.disable) 0 }}
      echo "Disabling apps . . ."
      run app:disable {{ join " " .Values.nextcloud.apps.disable }}
      {{ end }}

      {{- if gt (len .Values.nextcloud.apps.install) 0 }}
      for app in {{ join " " .Values.nextcloud.apps.install }}; do
        echo "Installing app ${app} . . ."
        run app:install ${app}
      done
      {{- end }}

      {{- if gt (len .Values.nextcloud.customOCC) 0 }}
        {{- range .Values.nextcloud.customOCC }}
      echo "Executing custom OCC command {{ . }} . . ."
      run {{ . }}
        {{ end }}
      {{- end }}

      echo "Setting set -e again . . ."
      set -e
    else
      echo "Database initialization already done, skipping this step!"
    fi

    echo "Setting data directory . . ."
    ncset datadirectory --value "/app/nextcloud/data"

    echo "Configuring redis and cache settings . . ."
    ncset redis host --value="{{ .Release.Name }}-redis"
    ncset redis port --value="6379"
    ncset redis dbindex --value="0"
    ncset redis password --value="${REDIS_PASSWORD}"
    ncset memcache.distributed --value="\\\OC\\\Memcache\\\Redis"
    ncset memcache.locking --value="\\\OC\\\Memcache\\\Redis"
    ncset memcache.local --value="\\\OC\\\Memcache\\\APCu"

    echo "Triple Backslashes FTW . . ."

    echo "Setting overwrite.cli.url to https://${NC_DOMAIN} . . ."
    ncset overwrite.cli.url --value="https://${NC_DOMAIN}"

    echo "Setting overwriteprotocol to HTTPS . . ."
    ncset overwriteprotocol --value="https"

    echo "Adding ${NC_DOMAIN} to trusted_domains . . ."
    ncset trusted_domains 1 --value="${NC_DOMAIN}"

    {{- if (default .Values.nextcloud.deleteSkeletonFolder true) }}
    echo "Setting skeleton directory to empty string . . ."
    ncset skeletondirectory --value="" 
    {{ end }}
    
    {{- if (default .Values.nextcloud.webcron.enabled true) }}
    echo "Setting background job mode to webcron . . ."
    run background:webcron
    {{- end }}

    echo "Setting trusted_proxies  . . ."
    ncset trusted_proxies --value="0.0.0.0/0"

    echo "Changing TMP directory . . ."
    ncset tempdirectory --value="/app/tmp"
  
    echo "Setting log backend to 'errorlog' . . ."
    run log:manage --backend="errorlog"

    {{- if (default .Values.nextcloud.disableWebUpdater true) }}
    echo "Disabling WebUpdater . . ."
    ncset upgrade.disable-web --value="true"
    {{ end }}

    {{- if .Values.nextcloud.defaultLanguage }}
    echo "Setting default language to {{ .Values.nextcloud.defaultLanguage }} . . ."
    ncset default_language --value="{{ .Values.nextcloud.defaultLanguage }}"

      {{- if (default .Values.nextcloud.forceLanguage false) }}
    echo "Enforcing default language . . ."
    ncset force_language --value="{{ .Values.nextcloud.defaultLanguage }}"
      {{ end }}
    {{ end }}

    {{- if .Values.nextcloud.defaultLocale }}
    echo "Setting default locale to {{ .Values.nextcloud.defaultLocale }} . . ."
    ncset default_locale --value="{{ .Values.nextcloud.defaultLocale }}"

      {{- if (default .Values.nextcloud.forceLocale false) }}
    echo "Enforcing default locale . . ."
    ncset force_locale --value="{{ .Values.nextcloud.defaultLocale }}"
      {{ end }}
    {{ end }}

    {{- if .Values.nextcloud.defaultPhoneRegion }}
    echo "Setting default PhoneRegion . . ."
    ncset default_phone_region --value="{{ .Values.nextcloud.defaultPhoneRegion }}"
    {{ end }}

    {{- if (default .Values.nextcloud.disableKnowledgeBase false) }}
    echo "Disabling knowledgebase . . ."
    ncset knowledgebaseenabled --value="false"
    {{ end }}

    {{- if not (default .Values.nextcloud.allowUserChangeDisplayName true) }}
    echo "Disabling user ability to change their display name . . ."
    ncset allow_user_to_change_display_name --value="false"
    {{ end }}

    {{- if (default .Values.nextcloud.mail.enabled false) }}
    echo "Configuring E-Mail settings . . ."

      {{- if .Values.nextcloud.mail.domain }}
    ncset mail_domain --value="{{ .Values.nextcloud.mail.domain }}"
      {{- end }}

      {{- if .Values.nextcloud.mail.fromAddress }}
    ncset mail_from_address --value="{{ .Values.nextcloud.mail.fromAddress }}"
      {{- end }}

      {{- if (default .Values.nextcloud.mail.debug false) }}
    ncset mail_smtpdebug --value="{{ .Values.nextcloud.mail.debug }}"
      {{- end }}

      {{- if .Values.nextcloud.mail.plaintextOnly }}
    ncset mail_send_plaintext_only --value="{{ .Values.nextcloud.mail.plaintextOnly }}"
      {{- end }}

      {{- if .Values.nextcloud.mail.mode }}
    ncset mail_smtpmode --value="{{ .Values.nextcloud.mail.mode }}"
      {{- end }}

      {{- if .Values.nextcloud.mail.smtp.host }}
    ncset mail_smtphost --value="{{ .Values.nextcloud.mail.smtp.host }}"
      {{- end }}

      {{- if .Values.nextcloud.mail.smtp.port }}
    ncset mail_smtpport --value="{{ .Values.nextcloud.mail.smtp.port }}"
      {{- end }}

      {{- if .Values.nextcloud.mail.smtp.timeout }}
    ncset mail_smtptimeout --value="{{ .Values.nextcloud.mail.smtp.timeout }}"
      {{- end }}

      {{- if .Values.nextcloud.mail.smtp.secure }}
    ncset mail_smtpsecure --value="{{ .Values.nextcloud.mail.smtp.secure }}"
      {{- end }}

      {{- if (default .Values.nextcloud.mail.auth.enabled false) }}
    ncset mail_smtpauth --value="true"

        {{- if .Values.nextcloud.mail.auth.type }}
    ncset mail_smtpauthtype --value="{{ .Values.nextcloud.mail.auth.type }}"
        {{- end }}

        {{- if .Values.nextcloud.mail.auth.username }}
    ncset mail_smtpname --value="{{ .Values.nextcloud.mail.auth.username }}"
        {{- end }}

        {{- if .Values.nextcloud.mail.auth.password }}
    ncset mail_smtppassword --value="${NC_EMAIL_PASSWORD}"
        {{- end }}
      {{- end }}
    {{- end }}

    echo "Done!"
